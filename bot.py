import os

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
from dotenv import load_dotenv


load_dotenv()


bot = Bot(token=os.getenv('API_TOKEN'))
dp = Dispatcher()

CHANNEL_ID = '-1002973485938' # id —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–≤ –±—É–¥—É—â–µ–º –±—É–¥—É—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è)


def get_main_inline_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text='üÜìüèÄ 6 –º—è—á–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ', callback_data='make_6'))
    builder.row(InlineKeyboardButton(text='üèÄ 5 –º—è—á–µ–π ¬∑ 1 ‚≠ê', callback_data='make_5'),
                 InlineKeyboardButton(text='üèÄ 3 –º—è—á–∞ ¬∑ 5 ‚≠ê', callback_data='make_3'))
    builder.row(InlineKeyboardButton(text='üèÄ 2 –º—è—á–∞ ¬∑ 8 ‚≠ê', callback_data='make_2'),
                 InlineKeyboardButton(text='üèÄ 1 –º—è—á ¬∑ 10 ‚≠ê', callback_data='make_1'))
    return builder.as_markup()


def get_inline_keyboard_for_free_step():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='https://t.me/msk_afisha_20'))
    builder.row(InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='check_subs'))
    return builder.as_markup()


answer_text = '''üèÄ –ü–æ–ø–∞–¥–∏ –∫–∞–∂–¥—ã–º –±—Ä–æ—Å–∫–æ–º –≤ –∫–æ–ª—å—Ü–æ –∏ –ø–æ–ª—É—á–∏ –∫—Ä—É—Ç–æ–π [–ø–æ–¥–∞—Ä–æ–∫, –ø–æ–¥—Ä–æ–±–Ω–µ–µ.](https://telegra.ph/Poluchaj-Telegram---podarki-za-kazhduyu-pobedu-08-20)

üèÜ –í—ã–ø–∞–ª –∫—É–±–æ–∫ - –ø—Ä–∏–∑ NFT –ø–æ–¥–∞—Ä–æ–∫.'''


@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    await main_answer(message)

async def main_answer(message: types.Message):
    await message.answer(answer_text, reply_markup=get_main_inline_keyboard(), parse_mode='markdown', disable_web_page_preview=True)

@dp.callback_query(lambda c: c.data and c.data.startswith('make'))
async def process_callback_button(callback_query: types.CallbackQuery):
    choice = callback_query.data.split('_')[-1]
    print(choice)
    if choice == '6':
        await callback_query.message.answer('–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –±—Ä–æ—Å–∫–∏!', reply_markup=get_inline_keyboard_for_free_step())
    else:
        await roll_dice(callback_query.message, int(choice))
    await callback_query.answer() # Always answer the callback query


@dp.callback_query(lambda c: c.data and c.data.startswith('check'))
async def process_free_request(callback_query: types.CallbackQuery):
    try:
        mem = await bot.get_chat_member(CHANNEL_ID, callback_query.from_user.id)
        if mem.status.lower() not in ('left', 'restricted', 'kicked'):
            await roll_dice(callback_query.message)
        else:
            raise
    except:
        await callback_query.message.answer('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã')
    await callback_query.answer()


async def roll_dice(message: types.Message, n: int = 6):
    if n < 6:
        await message.answer('[–∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–∫—É–ø–∫–∞ –∑–∞ –∑–≤–µ–∑–¥—ã]')
        await asyncio.sleep(0.6)
    data = []
    for i in range(n):
        res = await bot.send_dice(message.chat.id, emoji='üèÄ')
        await asyncio.sleep(0.5)
        data.append(res.dice.value)
    await asyncio.sleep(0.3 * i)
    answer_text = '**–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã**'
    for d in data:
        answer_text += '\n**‚ùå–ü—Ä–æ–º–∞—Ö**' if d < 4 else '\n**‚úÖ–ü–æ–ø–∞–ª**'
    await bot.send_message(message.chat.id, answer_text, parse_mode='markdown')
    await asyncio.sleep(0.7)
    if all(d > 3 for d in data):
        await bot.send_message(message.chat.id, 'üéâ')
        await bot.send_message(message.chat.id, '[–∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ –∏ –∏–Ω—Ñ–æ –æ –Ω–µ–º]')
    else:
        await bot.send_message(message.chat.id, '–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑–µ—Ç! –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?')
    await asyncio.sleep(0.7)
    await main_answer(message)



async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())